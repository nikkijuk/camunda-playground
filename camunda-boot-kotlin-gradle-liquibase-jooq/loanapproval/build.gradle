buildscript {
	ext {
		kotlinVersion = '1.2.71'
		springBootVersion = '2.1.2.RELEASE'
		camundaVersion = '7.10.0' // camunda bpm 
		camundaBootVersion = '3.2.0' // camunda config for spring boot is packaged separately
		liquibasePluginVersion = '2.0.1'  // for liquibase 
		snakeYamlVersion = '1.23'  // for liquibase 
		jooqVersion = '3.11.9'  // for jooq
		jooqPluginVersion = '3.0.2'  // for jooq
		h2Version = '1.4.197'
	}
	repositories {
		mavenCentral()
		jcenter()
		// find jooq plugin
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("nu.studer:gradle-jooq-plugin:${jooqPluginVersion}")
		classpath("org.liquibase:liquibase-gradle-plugin:${liquibasePluginVersion}")
		classpath("com.h2database:h2:${h2Version}")
	}
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'
apply plugin: 'org.liquibase.gradle'

group = 'com.jukkanikki'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', 'Greenwich.RC2')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
	
	// define camunda bpm versions
	imports {
		mavenBom "org.camunda.bpm:camunda-bom:${camundaVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation "org.jetbrains.kotlin:kotlin-stdlib"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation "org.jetbrains.kotlin:kotlin-reflect"

	// starts camunda web ui
	implementation "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:${camundaBootVersion}" 
	
	// starts camunda rest api
	implementation "org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-rest:${camundaBootVersion}"
	
	// needed by liquibase yaml parser
	compile "org.yaml:snakeyaml:${snakeYamlVersion}"

	// https://mvnrepository.com/artifact/com.h2database/h2
	//compile "com.h2database:h2:${h2Version}"

	// plugin ensures that all your dependencies use the version and edition specified in the jooq configuration
	//compile 'org.jooq:jooq:${jooqVersion}'
	implementation 'org.jooq:jooq'

	implementation "com.h2database:h2:${h2Version}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

jooq {
	version = "${jooqVersion}" // the default (can be omitted)
	edition = 'OSS'    // the default (can be omitted), other allowed values are PRO, PRO_JAVA_6, and TRIAL
	loanapproval(sourceSets.main) {
		jdbc {
			driver = "org.h2.Driver" // 'org.postgresql.Driver'
			url =  'jdbc:h2:mem:myDB;MODE=MySQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE' // 'jdbc:postgresql://localhost:5432/sample'
			user = 'sa'
			//password = ''
			properties {
				property {
					key = 'ssl'
					value = 'true'
				}
			}
		}
		generator {
			name = 'org.jooq.codegen.DefaultGenerator'
			strategy {
				name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				// ...
			}
			database {
				// https://www.jooq.org/doc/3.11/manual/code-generation/codegen-advanced/codegen-config-database/codegen-database-name/
				name = 'org.jooq.meta.h2.H2Database' // 'org.jooq.meta.postgres.PostgresDatabase'
				inputSchema = 'PUBLIC'
				forcedTypes {
					forcedType {
						name = 'varchar'
						expression = '.*'
						types = 'JSONB?'
					}
					forcedType {
						name = 'varchar'
						expression = '.*'
						types = 'INET'
					}
				}
				// ...
			}
			generate {
				relations = true
				deprecated = false
				records = true
				immutablePojos = true
				fluentSetters = true
				// ...
			}
			target {
				packageName = 'com.jukkanikki.loanapproval.db'
				directory = 'src/generated/java'
			}
		}
	}
}

// https://medium.com/@readsethu/jooq-flyway-spring-boot-and-gradle-44a8d3f289
// generateLoanapprovalJooqSchemaSource.dependsOn jooqMigrate
